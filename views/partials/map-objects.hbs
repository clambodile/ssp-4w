<h1 id="map">Map</h1>
<h2 id="lesson">Lesson</h2>
<iframe src="https://docs.google.com/presentation/d/1Bwp5yuCV70PiGBB2wqK7ZJ5u2LU6et2JEMQ9pPODASA/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>

<h2 id="exercises">Exercises</h2>
<pre><code class="lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">each</span>(<span class="hljs-params">coll, f</span>) </span>{
  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(coll)) {
    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>; i &lt; coll.length; i++) {
      f(coll[i], i);
    }
  } <span class="hljs-decorator"><span class="hljs-keyword">else</span></span> {
    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> key <span class="hljs-keyword">in</span> coll) {
      f(coll[key], key);
    }
  }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">map</span>(<span class="hljs-params">coll, f</span>) </span>{
  <span class="hljs-built_in">var</span> acc = [];
  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(coll)) {
    acc = {};
  }
  each(coll, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">element, key</span>) </span>{
    acc[key] = f(element, key);
  });
  <span class="hljs-keyword">return</span> acc;
}
</code></pre>
<h3 id="basic-requirements">Basic Requirements</h3>
<ol>
<li><p>The <code>incrementValues</code> function from yesterday can be written much more
elegantly using <code>map</code>. Rewrite that function using our new and improved
version of <code>map</code>.</p>
<p>For convenience, the prompt is reproduced below:</p>
<p>Write a function called <code>incrementValues</code> that accepts an object as a
parameter, and outputs an object with all of its numeric values incremented
by one. You&#39;ll want to use the updated version of <code>map</code> for this, and you
will need to check the type of each value to determine whether or not it
should be incremented.</p>
</li>
<li><p>Write a function called <code>uppercaseValues</code> that, given an object as a
parameter, returns a new object with all of its <em>string</em> values converted to
uppercase. You&#39;ll want to make use of <code>.toUpperCase()</code> for this:</p>
<pre><code class="lang-js"><span class="hljs-string">"hello"</span>.toUpperCase(); <span class="hljs-regexp">//</span> =&gt; <span class="hljs-string">"HELLO"</span>
</code></pre>
<p>Also, ensure that you only attempt to convert <em>strings</em> to uppercase -- you
may want to use <code>typeof</code> for this.</p>
</li>
<li><p>Write a function called <code>countNestedKeys</code> that, given an object where all
values are <strong>also objects</strong>, returns an object that contains the count of
keys in each nested object, <em>e.g.</em></p>
<pre><code class="lang-js"><span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">countNestedKeys</span>(object) {
  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Your code here</span>
}
<span class="hljs-selector-tag">countNestedKeys</span>({<span class="hljs-selector-tag">a</span>: {<span class="hljs-selector-tag">b</span>: <span class="hljs-selector-tag">1</span>, <span class="hljs-selector-tag">c</span>: <span class="hljs-selector-tag">7</span>}, <span class="hljs-selector-tag">f</span>: {<span class="hljs-attribute">h</span>: <span class="hljs-number">22</span>, <span class="hljs-attribute">g</span>: <span class="hljs-number">12</span>, <span class="hljs-attribute">i</span>: <span class="hljs-number">24</span>}});
<span class="hljs-comment">// =&gt; {a: 2, b: 3}</span>
</code></pre>
</li>
</ol>
