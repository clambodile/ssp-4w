<h1 id="self-challenge">Self Challenge</h1>
<h2 id="instructions">Instructions</h2>
<ol>
<li>First, start a new project for the warmup by right-clicking
<a href="https://github.com/jalehman/rp-starter/archive/master.zip">this link</a> and &quot;Save
Link As...&quot; to your Desktop (or somewhere else).</li>
<li>Complete this exercise <strong>individually, not in pairs</strong>.</li>
<li><strong>If you need help understanding the instructions, please ask for help! The
instructor and TA(s) are happy to help clarify the instructions.</strong></li>
<li><strong>Attempt to complete each exercise -- if you are working on an exercise for
longer than ten minutes, move on to the next one.</strong></li>
<li>Afterwards, please <strong>submit your answers</strong> via Slack (we&#39;ll cover how to do
this after the time is up)!</li>
</ol>
<h2 id="exercises">Exercises</h2>
<ol>
<li><p>Write a function called <code>billTotal</code> that can be used to calculate the total
to be paid at a restaurant -- including <em>tip</em> and <em>tax</em> -- given the
<em>subtotal</em> (<em>i.e.</em> cost of food and drinks). We can assume that the tip will
be 15% and tax will be 9.5%. Make sure that the tip does not include the tax!</p>
</li>
<li><p>Implement the function called <code>animalNoise</code> that accepts two parameters: a
type of animal and an <em>emotion</em> that indicates that animal&#39;s current
emotional state. Based on the combination of <code>animal</code> and <code>emotion</code>,
<code>animalNoise</code> should return an appropriate noise (represented as a string).
The function should work with at least two different animals and emotions.</p>
<pre><code class="lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animalNoise</span><span class="hljs-params">(animal, emotion)</span> </span>{
<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> your code here</span>
}
</code></pre>
<p>Some ideas include:</p>
<ul>
<li><strong>Animals:</strong> cat, dog, horse, duck, chicken, cow, human</li>
<li><strong>Emotions:</strong> angry, happy, sad, surprised</li>
</ul>
<p>If you&#39;re feeling uninspired, feel free to use &quot;smileys&quot; to convey emotion.</p>
</li>
<li><p>The <em>digital sum</em> of a number is the sum of all its digits, <em>e.g.</em>
<code>digitalSum(1337)</code> should output <code>14</code>: <code>1 + 3 + 3 + 7</code>. Use <strong>any</strong> of the
methods of reptition that we have covered so far to implement this function.</p>
<pre><code class="lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">digitalSum</span><span class="hljs-params">(n)</span> </span>{
  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> your code here</span>
}
</code></pre>
<p><strong>HINTS:</strong> Try the following at a console:</p>
<pre><code class="lang-js"><span class="hljs-number">1337</span> % <span class="hljs-number">10</span><span class="hljs-comment">;</span>
<span class="hljs-number">133</span> % <span class="hljs-number">10</span><span class="hljs-comment">;</span>
<span class="hljs-number">13</span> % <span class="hljs-number">10</span><span class="hljs-comment">;</span>
<span class="hljs-number">1337</span> / <span class="hljs-number">10</span><span class="hljs-comment">;</span>
Math.floor(<span class="hljs-number">1337</span> / <span class="hljs-number">10</span>)<span class="hljs-comment">;</span>
Math.floor(<span class="hljs-number">133</span> / <span class="hljs-number">10</span>)<span class="hljs-comment">;</span>
</code></pre>
<p>What should <code>digitalSum</code> of a single-digit number return, <em>e.g.</em> <code>digitalSum(8)</code>?</p>
</li>
</ol>
